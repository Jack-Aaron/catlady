{"version":3,"sources":["assets/cat.png","assets/dog.png","utils/API.js","components/Navbar/index.js","components/Wrapper/index.js","components/petInfoForm/petInfoForm.js","components/Container/index.js","components/LoginSignupForm/LoginSignupForm.js","pages/SignUp/SignUp.js","pages/Login/Login.js","components/Header/index.js","components/PetCard/index.js","components/AddBtn/index.js","components/AddBtnFood/index.js","pages/Dashboard.js","components/Form/Form.js","pages/PetFoodForm/PetFoodForm.js","pages/FoodTable/FoodTable.js","components/Footer/index.js","components/finalCalculation/FinalCalculation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserData","axios","post","get","petId","PetData","PetFoodData","foodId","Navigation","setUserData","history","useHistory","from","useLocation","state","pathname","Navbar","style","backgroundColor","Brand","as","Link","className","to","color","Nav","window","location","onClick","API","then","res","username","id","replace","Wrapper","props","PetInfoForm","form","setForm","useState","userData","handleChange","event","target","name","value","useEffect","data","Row","Col","Card","borderRadius","boxShadow","Form","Group","controlId","Label","Control","type","onChange","min","Text","Button","disabled","petType","petName","currentWeight","idealWeight","preventDefault","mealsPerDay","userId","catch","err","console","log","Container","fluid","LoginSignupForm","Body","Title","textAlign","height","formname","htmlFor","placeholder","uValue","pValue","formUser","formPass","handleFormSubmit","buttonText","children","SignUp","initalForm","password","formObject","setFormObject","response","status","href","Login","Jumbotron","fontFamily","Header","PetCard","border","filter","Img","src","imgsrc","alt","maxHeight","maxWidth","Subtitle","setCurrentPet","AddBtn","width","margin","marginTop","body","block","variant","AddBtnFood","route","title","Dashboard","petsState","setPetsState","noPets","length","map","pet","key","_id","xs","paddingBottom","Cat","Dog","currentPet","md","Input","PetFoodForm","calPer","ozPer","caloriesPerPackage","ozPerPackage","ingredientsRating","ing","nutritionRating","nut","ingredients","protein","fat","carbs","ash","fiber","moisture","FoodTable","foodState","setFoodState","noFoods","lg","foodType","food","selectedFoodType","Table","striped","borderColor","Footer","FinalCalculation","results","setState","selectedFood","setSelectedFood","mealNumber","weight","inputFood","totalHighEndAmount","totalLowEndAmount","lowEndCalories","highEndCalories","packagesPerMonthLow","packagesPerMonthHigh","caloriesPerOz","calculatePackagesPerMonth","noFood","parseFloat","toFixed","Math","ceil","indexOf","index","App","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e539ae24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.8e5986a7.png\";","module.exports = __webpack_public_path__ + \"static/media/dog.8dcf68ed.png\";","import axios from \"axios\";\n\nexport default {\n  // Saves a user to the database\n  saveUser: function (UserData) {\n    return axios.post(\"/api/user\", UserData);\n  },\n  login: function (UserData) {\n    return axios.post(\"/api/user/login\", UserData);\n  },\n  logout: function () {\n    return axios.get(\"/api/user/logout\");\n  },\n  getUser: function () {\n    return axios.get(\"api/user/currentuser\");\n  },\n  getPets: function () {\n    return axios.get(\"/api/user/pets\");\n  },\n  getCurrentPet: function (petId) {\n    return axios.get(\"/api/user/pets/\"+ petId);\n  },\n  savePet: function (PetData){\n    return axios.post(\"/api/user/pets\", PetData);\n  },\n  savePetFood: function (PetFoodData){\n    return axios.post(\"/api/user/petfood\", PetFoodData);\n  },\n  getPetFood: function () {\n    return axios.get(\"/api/user/petfood\");\n  },\n  getCurrentFood: function (foodId) {\n    return axios.get(\"/api/user/petfood/\" + foodId);\n  },\n};\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport API from '../../utils/API';\nimport './style.css';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst Navigation = ({ setUserData }) => {\n  let history = useHistory();\n  let location = useLocation();\n  let { from } = location.state || { from: { pathname: '/login' } };\n\n  function logout() {\n    API.logout()\n      .then(res => {\n        setUserData({\n          username: '',\n          id: '',\n        })\n        history.replace(from)\n      })\n  }\n\n  return (\n    <div>\n      <Navbar style={{ backgroundColor: '#B5838D' }}>\n        <Navbar.Brand\n          as={Link}\n          className='aladin'\n          to='/'\n        >\n          <span style={{ color: '#FFCDB2' }}>catlady</span>\n        </Navbar.Brand>\n        <Nav className='ml-auto'>\n          <Nav.Link\n            as={Link}\n            to='/'\n            className={\n              window.location.pathname === '/'\n                ? 'nav-link active'\n                : 'nav-link'\n            }\n          >\n            My Pets\n          </Nav.Link>\n          <Nav.Link\n            as={Link}\n            to=\"/petfoods\"\n            className={\n              window.location.pathname === \"/\"\n                ? \"nav-link active\"\n                : \"nav-link\"\n            }\n          >\n            Food List\n          </Nav.Link>\n          <Nav.Link\n            as={Link}\n            to=\"/signup\"\n            className={\n              window.location.pathname === '/signup'\n                ? 'nav-link active'\n                : 'nav-link'\n            }\n          >\n            Sign Up\n          </Nav.Link>\n          <Nav.Link\n            onClick={logout}\n            className='ml-auto'>\n            Logout\n          </Nav.Link>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React, { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Form from \"react-bootstrap/Form\";\nimport Row from 'react-bootstrap/Row';\nimport API from \"../../utils/API\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport default function PetInfoForm({ form, setForm }) {\n\n  let history = useHistory();\n  let location = useLocation();\n  let { from } = location.state || { from: { pathname: \"/\" } };\n\n  const [userData, setUserData] = useState({\n    username: \"\",\n    id: \"\",\n  });\n\n  useEffect(() => {\n    API.getUser().then((res) => setUserData(res.data));\n  }, []);\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value })\n  };\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (form.petName && form.petType && form.currentWeight && form.idealWeight) {\n      API.savePet({\n        petName: form.petName,\n        petType: form.petType,\n        currentWeight: form.currentWeight,\n        idealWeight: form.idealWeight,\n        mealsPerDay: form.mealsPerDay,\n        userId: userData.id,\n      })\n        .then(res => {\n          history.replace(from)\n        })\n        .catch(err => console.log(err))\n    }\n  };\n\n  return (\n    <Row className=\"row justify-content-center pt-5\">\n      <Col className=\"col-md-6 col-md-offset-3\">\n        <Card className=\"card p-4\" id=\"card\" style={{ borderRadius: \"2em\", boxShadow: \"0px 0px 4px 4px #ccc\" }}>\n          <Form>\n            <Form.Group controlId=\"petName\">\n              <Form.Label>Pet Name: </Form.Label>\n              <Form.Control\n                name=\"petName\"\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"petType\">\n              <Form.Label>Pet Type: </Form.Label>\n              <Form.Control\n                name=\"petType\"\n                as=\"select\"\n                onChange={handleChange}\n              >\n                <option> </option>\n                <option>Cat</option>\n                <option>Dog</option>\n              </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"currentWeight\">\n              <Form.Label>Current Weight: </Form.Label>\n              <Form.Control\n                name=\"currentWeight\"\n                type=\"number\"\n                min={1}\n                onChange={handleChange}\n              />\n              <Form.Text className=\"text-muted\">Please enter in lb</Form.Text>\n            </Form.Group>\n            <Form.Group controlId=\"IdealWeight\">\n              <Form.Label>Ideal Weight: </Form.Label>\n              <Form.Control\n                name=\"idealWeight\"\n                type=\"number\"\n                min={1}\n                onChange={handleChange}\n              />\n              <Form.Text className=\"text-muted\">Please enter in lb</Form.Text>\n            </Form.Group>\n            <Form.Group controlId=\"mealsPerDay\">\n              <Form.Label>Meals per day: </Form.Label>\n              <Form.Control\n                name=\"mealsPerDay\"\n                type=\"number\"\n                min={1}\n                onChange={handleChange}\n              />\n              <Form.Text className=\"text-muted\">How many times a day do you feed this pet?</Form.Text>\n            </Form.Group>\n\n            <Button\n              disabled={!(form.petType && form.petName && form.currentWeight && form.idealWeight)}\n              type=\"button\"\n              onClick={handleFormSubmit}\n            > Submit</Button>\n\n          </Form>\n        </Card>\n      </Col>\n    </Row>\n  );\n}","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from '../Container';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport './style.css'\n\n\nfunction LoginSignupForm(props) {\n    return (\n        <Container className='pb-3'>\n            <Row className=\"row justify-content-center pb-5\">\n                <Col className=\"col-md-12 col-md-offset-3\">\n                    <Card className=\"card px-4\" id=\"card\" style={{\n                        borderRadius: \"2em\",\n                        boxShadow: \"0px 0px 4px 4px #ccc\",\n                    }}>\n                        <Card.Body>\n                            <Card.Title style={{ textAlign: 'center',\n                        height:0 }}>{props.formname}</Card.Title>\n                            <Form className=\"login\">\n                                <Form.Group className=\"form-group\">\n                                    <Form.Label htmlFor=\"exampleInputEmail1\">Email address</Form.Label>\n                                    <Form.Control\n                                        onChange={props.handleChange}\n                                        name=\"username\"\n                                        type=\"email\"\n                                        className=\"form-control\"\n                                        placeholder=\"Email (required)\"\n                                        value={props.uValue} />\n                                </Form.Group>\n                                <Form.Group className=\"form-group\">\n                                    <Form.Label htmlFor=\"exampleInputPassword1\">Password</Form.Label>\n                                    <Form.Control\n                                        onChange={props.handleChange}\n                                        name=\"password\"\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        placeholder=\"Password\"\n                                        value={props.pValue} />\n                                </Form.Group>\n                                <Button\n                                    disabled={!(props.formUser && props.formPass)}\n                                    onClick={props.handleFormSubmit}\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\">{props.buttonText}\n                                </Button>\n                                <Form.Group className='pt-2'>\n                                {props.children}\n                                </Form.Group>\n                            </Form>\n                          \n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default LoginSignupForm","import React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport API from \"../../utils/API\";\nimport LoginSignupForm from \"../../components/LoginSignupForm/LoginSignupForm\";\nimport './SignUp.css'\n\nfunction SignUp() {\n    const initalForm = { username: \"\", password: \"\" }\n    const [formObject, setFormObject] = useState(initalForm)\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/login\" } };\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n        setFormObject({ ...formObject, [name]: value })\n    };\n\n    function handleFormSubmit(event) {\n        event.preventDefault();\n        if (formObject.username && formObject.password) {\n            API.saveUser({\n                username: formObject.username,\n                password: formObject.password\n            }).then(setFormObject(initalForm))\n                .then(res => history.replace(from))\n                .catch(err => {\n                    setFormObject({...formObject, err: err.response.status})\n                });\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <LoginSignupForm\n                formname={\"Sign Up Form\"}\n                handleChange={handleChange}\n                handleFormSubmit={handleFormSubmit}\n                buttonText={\"Sign Up\"}\n                formUser={formObject.username}\n                formPass={formObject.password}\n                uValue={formObject.username || \"\"}\n                pValue={formObject.password || \"\"}\n            >\n                <p>Or Login <a href=\"/\">Here</a></p>\n                {formObject.err === 422 ? <div className=\"alert-danger\">Error: Username already exists</div> : null}\n                {formObject.err === 500 ? <div className=\"alert-danger\">Error: Sorry we are currently experiencing issues</div> : null}\n            </LoginSignupForm>\n        </div>\n    )\n}\n\nexport default SignUp","import React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport Container from 'react-bootstrap/Container';\nimport Jumbrotron from 'react-bootstrap/Jumbotron';\nimport API from \"../../utils/API\";\nimport LoginSignupForm from \"../../components/LoginSignupForm/LoginSignupForm\";\nimport './Login.css'\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nfunction Login(props) {\n    const initalForm = { username: \"\", password: \"\" }\n    const [formObject, setFormObject] = useState(initalForm)\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/\" } };\n\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n        setFormObject({ ...formObject, [name]: value })\n    };\n\n    function handleFormSubmit(event) {\n        event.preventDefault();\n        if (formObject.username && formObject.password) {\n            API.login({\n                username: formObject.username,\n                password: formObject.password\n            }).then(res => {\n                props.setUserData(res.data);\n                setFormObject(initalForm)\n            })\n                .then(res => history.replace(from))\n                .catch(err => {\n                    setFormObject({ ...formObject, err: err.response.status })\n                })\n        }\n    };\n\n    return (\n        <>\n            <Jumbotron style={{ backgroundColor: '#FFB4A2' }} fluid>\n                <h1 style={{\n                    textAlign: 'center',\n                    color: '#6D6875',\n                    fontFamily: 'Lato'\n                }}>Manage The Diets Of All Your Pets</h1>\n            </Jumbotron>\n            <Container>\n                <LoginSignupForm\n                    formname={\"Login Form\"}\n                    handleChange={handleChange}\n                    handleFormSubmit={handleFormSubmit}\n                    buttonText={\"Login\"}\n                    formUser={formObject.username}\n                    formPass={formObject.password}\n                    uValue={formObject.username || \"\"}\n                    pValue={formObject.password || \"\"}\n                >\n                    <p>Or Sign Up <a href=\"/signup\">Here</a></p>\n                    {formObject.err === 401 ? <div className=\"alert-danger\">Error: Username or password is incorrect</div> : null}\n                    {formObject.err === 500 ? <div className=\"alert-danger\">Error: Sorry we are currently experiencing issues</div> : null}\n                </LoginSignupForm>\n            </Container>\n        </>\n    )\n}\n\nexport default Login","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport './style.css';\n\nconst Header = (props) => {\n\n    return (\n        <div>\n            <Jumbotron style={{\n                backgroundColor: '#E5989B',\n                textAlign: 'center'\n            }}>\n                <h1 className=\"display-3\">My Pets</h1>\n                <p className=\"lead\">Choose one of your Pets by clicking one below to check out or modify their diet.</p>\n            </Jumbotron>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport API from \"../../utils/API\";\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport './style.css';\n\nconst PetCard = (props) => {\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/finalcalculation\" } };\n\n    function handleClick(event) {\n        let petId = event.target.name\n\n        API.getCurrentPet(petId)\n        .then(res => {\n            props.setCurrentPet(res.data)\n            history.replace(from)\n        })\n    }\n\n    return (\n        <div>\n            <Card\n                id={props.id}\n                style={{\n                    backgroundColor: '#FFB4A2',\n                    border: '3px solid #E5989B',\n                    borderRadius: '10px',\n                    filter: 'grayscale(50%)'\n                }}>\n                <Card.Img src={props.imgsrc} className='petImg' alt=\"Card image cap\" style={{\n                    maxHeight: '300px',\n                    maxWidth: '200px'\n                }} />\n                <Card.Body>\n                    <Card.Title>{props.name}</Card.Title>\n                    <Card.Subtitle>{props.type}</Card.Subtitle>\n                </Card.Body>\n                <Button\n                    name={props.id}\n                    onClick={handleClick}>Select Pet\n                </Button>\n            </Card>\n        </div >\n    )\n}\n\nexport default PetCard;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from '../Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport './style.css';\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n\nconst AddBtn = (props) => {\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/newPet\" } };\n\n    return (\n        <div>\n            <Container>\n                <Row className='justify-content-center text-center'>\n                    <Col>\n                        <Card style={{\n                            backgroundColor: '#E5989B',\n                            width: '21em',\n                            margin: '0 auto',\n                            marginTop: '3em'\n                        }} body>\n                            <Card.Title>Start caring for a new friend!</Card.Title>\n\n                            <Button className='AddBtn' block\n                                variant='primary'\n                                onClick={() => history.replace(from)}>\n                                Add Pet </Button>\n\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\n\nexport default AddBtn;\n\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Container from '../Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport './style.css';\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n\nconst AddBtnFood = ({route, title}) => {\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/petfood\"} };\n\n    return (\n        <div>\n            <Container>\n                <Row className='justify-content-center text-center'>\n                    <Col>\n                        <Card style={{\n                            backgroundColor: '#E5989B',\n                            width: '21em',\n                            margin: '0 auto',\n                            marginTop: '3em'\n                        }} body>\n                            <Card.Title>Add a new food!</Card.Title>\n\n                            <Button className='AddBtn' block\n                                variant='primary'\n                                onClick={() => history.replace(from)}>\n                                Add Food </Button>\n\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    )\n}\n\n\nexport default AddBtnFood;\n\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../utils/API\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Header from \"../components/Header\";\nimport Container from \"../components/Container\";\nimport PetCard from \"../components/PetCard\";\nimport AddBtn from \"../components/AddBtn\";\nimport AddBtnFood from \"../components/AddBtnFood\";\nimport ViewFood from \"../components/ViewFood\";\nimport Cat from '../assets/cat.png';\nimport Dog from '../assets/dog.png';\n\n\nfunction Dashboard(props) {\n  \n  const [petsState, setPetsState] = useState([]);\n  \n\n  useEffect(() => {\n    API.getPets().then((res) => {\n      setPetsState(res.data);\n    })\n  }, []);\n\n\n  const noPets = <div> No Pets Found</div>;\n\n  return (\n    <div>\n      <Header />\n      <Container>\n        <Row className=\"justify-content-around\">\n          {\n            petsState.length !== 0 ?\n\n              petsState.map((pet) => (\n                < Col key={pet._id} xs=\"auto\" style={{ paddingBottom: 15 }}>\n                  <PetCard\n                    name={pet.petName}\n                    type={pet.petType}\n                    imgsrc={pet.petType === 'Cat' ? Cat : Dog}\n                    id={pet._id}\n                    currentPet={props.currentPet}\n                    setCurrentPet={props.setCurrentPet}\n                  />\n                </Col >\n              )) : noPets}\n        </Row>\n        <hr style={{width:\"80%\"}}/>\n        <Row className=\"justify-content-around\">\n          <Col md={6}>\n            <AddBtn />\n          </Col>\n          <Col md={6}>\n            <AddBtnFood />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <>\n      <input className=\"form-control mt-2\" {...props} />\n    </>\n  );\n}\n\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\" type=\"submit\">\n      {props.children}\n    </button>\n  );\n}","import React from 'react';\nimport { useHistory, useLocation } from \"react-router-dom\"\nimport API from '../../utils/API';\nimport { Input } from '../../components/Form/Form';\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from '../../components/Container';\nimport Card from 'react-bootstrap/Card';\nimport Form from \"react-bootstrap/Form\";\n\nfunction PetFoodForm({ form, setForm }) {\n\n    let history = useHistory();\n    let location = useLocation();\n    let { from } = location.state || { from: { pathname: \"/\" } };\n\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n        setForm({ ...form, [name]: value })\n    };\n\n    function handleFormSubmit(event) { \n        event.preventDefault();\n        if (form.name && form.calPer && form.ozPer && form.petType) {\n            API.savePetFood({\n                name: form.name,\n                petType: form.petType,\n                caloriesPerPackage: form.calPer,\n                ozPerPackage: form.ozPer,\n                ingredientsRating: form.ing,\n                nutritionRating: form.nut,\n                ingredients: form.ingredients,\n                protein: form.protein,\n                fat: form.fat,\n                carbs: form.carbs,\n                ash: form.ash,\n                fiber: form.fiber,\n                moisture: form.moisture,\n            })\n                .then(res => history.replace(from))\n                .catch(err => console.log(err))\n        }\n    };\n\n    return (\n        <Container>\n        <Row className=\"row justify-content-center pt-5\">\n            <Col className=\"col-md-6 col-md-offset-3\">\n                <Card className=\"card p-4\" id=\"card\" style={{ borderRadius: \"2em\", boxShadow: \"0px 0px 4px 4px #ccc\" }}>\n                    <Card.Body><h2>Enter a Pet Food</h2>\n                    <Form className=\"login\">\n                        <Form.Group className=\"form-group\">\n                            <Form.Label>Pet Food Name: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"name\"\n                                type=\"text\" />\n                            <Form.Label className=\"mt-3\">Pet Food Type: </Form.Label>\n                            <Form.Control\n                                name=\"petType\"\n                                as=\"select\"\n                                onChange={handleChange}\n                            >\n                                <option> </option>\n                                <option>Cat</option>\n                                <option>Dog</option>\n                            </Form.Control>\n                            <Form.Label className=\"mt-3\">Cal Per Package: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"calPer\"\n                                type=\"text\" />\n                            <Form.Label className=\"mt-3\">Oz Per Package: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"ozPer\"\n                                type=\"text\" />\n                            <Form.Label className=\"mt-3\">Ingredient Rating: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"ing\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Nutrition Rating: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"nut\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Ingredients: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"ingredients\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Protein: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"protein\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Fat: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"fat\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Carbs: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"carbs\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Ash: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"ash\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Fiber: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"fiber\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                            <Form.Label className=\"mt-3\">Moisture: </Form.Label>\n                            <Input\n                                onChange={handleChange}\n                                name=\"moisture\"\n                                type=\"text\"\n                                placeholder=\"(Optional)\" />\n                        </Form.Group>\n                        <Button\n                            disabled={!(form.name && form.calPer && form.ozPer && form.petType)}\n                            onClick={handleFormSubmit}\n                            type=\"submit\"\n                            className=\"btn btn-primary\">Submit\n                    </Button>\n                    </Form>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        </Container>\n    )\n}\n\nexport default PetFoodForm;\n","import React, { useEffect, useState } from \"react\";\nimport \"./foodtable.css\"\nimport API from \"../../utils/API\"\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n\n\nfunction FoodTable() {\n    const [foodState, setFoodState] = useState([]);\n\n    function handleChange(event) {\n        const foodType = (event.target.value)\n\n        API.getPetFood().then((food) => {\n            const allFood = food.data;\n            const selectedFoodType = allFood.filter(food => food.petType === foodType)\n            setFoodState(selectedFoodType);\n        });\n\n    }\n\n    const noFoods = <h3> Choose A Pet Food Type From The Dropdown</h3>;\n\n    return (\n        <Container>\n            <Row>\n                <Col >\n                    <h2>Pet Food List and Nutrition Info</h2>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center mt-3\">\n                <Col lg={3}>\n                    <Form.Group>\n                        <Form.Control as=\"select\"\n                            onChange={handleChange}\n                        >\n                            <option value=\"0\">Search By Food Type</option>\n                            <option value=\"Dog\">Dog</option>\n                            <option value=\"Cat\">Cat</option>\n                        </Form.Control>\n                        <br />\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n\n                    {\n                        foodState.length !== 0 ?\n                            <Table striped id=\"petFoods\" style={{border:\"solid\", borderColor:\"#B5838D\"}}>\n                                <tbody>\n                                    <tr>\n                                        <th>Food Name</th>\n                                        <th>Food Type</th>\n                                        <th>Ingredients</th>\n                                        <th>Protein</th>\n                                        <th>Fat</th>\n                                        <th>Carbs</th>\n                                    </tr>\n                                    {foodState.map((food) => (\n                                        <tr key={food._id}>\n                                            <td>{food.name}</td>\n                                            <td>{food.petType} Food</td>\n                                            <td>{food.ingredients}</td>\n                                            <td>{food.protein}</td>\n                                            <td>{food.fat}</td>\n                                            <td>{food.carbs}</td>\n                                        </tr>\n\n                                    ))}\n                                </tbody>\n                            </Table>\n                            : noFoods}\n\n                </Col>\n            </Row>\n        </Container>\n\n    )\n\n\n}\n\n\n\nexport default FoodTable","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n    return (\n\n        <footer className=\"footer aladin\" style={{ color: '#FFCDB2' }}>\n            catlady\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, { useEffect, useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport API from \"../../utils/API\";\n\nexport const FinalCalculation = ({ currentPet }) => {\n  const [state, setState] = useState({\n    results: [],\n  });\n  const [selectedFood, setSelectedFood] = useState([])\n\n  let name = currentPet.petName;\n  let mealNumber = currentPet.mealsPerDay;\n  let petType = currentPet.petType;\n  let weight = currentPet.currentWeight;\n  let inputFood = selectedFood.name;\n  let ozPerPackage = selectedFood.ozPerPackage;\n  let caloriesPerPackage = selectedFood.caloriesPerPackage;\n  let totalHighEndAmount = 0;\n  let totalLowEndAmount = 0;\n  let lowEndCalories = 0;\n  let highEndCalories = 0;\n  let packagesPerMonthLow = 0;\n  let packagesPerMonthHigh = 0;\n  let caloriesPerOz = caloriesPerPackage / ozPerPackage;\n\n  if (petType === \"Cat\") {\n    lowEndCalories = weight * 20;\n    highEndCalories = weight * 35;\n    totalLowEndAmount = lowEndCalories / caloriesPerOz;\n    totalHighEndAmount = highEndCalories / caloriesPerOz;\n    calculatePackagesPerMonth();\n  } else {\n    lowEndCalories = weight * 25;\n    totalLowEndAmount = lowEndCalories / caloriesPerOz;\n    highEndCalories = weight * 30;\n    totalHighEndAmount = highEndCalories / caloriesPerOz;\n    calculatePackagesPerMonth();\n  }\n\n  function calculatePackagesPerMonth() {\n    packagesPerMonthLow = (lowEndCalories / caloriesPerPackage) * 30;\n    packagesPerMonthHigh = (highEndCalories / caloriesPerPackage) * 30;\n  }\n\n\n  useEffect(() => {\n    API.getPetFood().then((food) => {\n      setState({\n        ...state,\n        results: food.data,\n      });\n    });\n  }, []);\n\n  const handleOnChange = (event) => {\n    const foodId = event.target.value\n    \n    API.getCurrentFood(foodId)\n      .then(res => {\n        setSelectedFood(res.data)\n      })\n      .catch(err => console.log(err))\n  };\n\n  const noFood = <><h4>Select a Food to See Feeding Recomendation</h4></>\n\n  return (\n    <div className=\"row justify-content-center pt-5\">\n      <div className=\"col-md-6 col-md-offset-3\">\n        <div className=\"card p-4\" id=\"card\" style={{ borderRadius: \"2em\", boxShadow: \"0px 0px 4px 4px #ccc\" }}>\n          <h1>{name}</h1>\n          <p>\n            Your {petType} will need between {lowEndCalories} and {highEndCalories} calories per day.\n      </p>\n          {selectedFood.length === 0 ? noFood :\n            <>\n              <p>\n                Using {inputFood} they will need between {parseFloat(totalLowEndAmount).toFixed(2)} and {parseFloat(totalHighEndAmount).toFixed(2)} oz per day to maintain their current weight.\n      </p>\n              <p>\n                That is between {parseFloat(totalLowEndAmount / mealNumber).toFixed(2)} and {parseFloat(totalHighEndAmount / mealNumber).toFixed(2)} oz per meal.\n      </p>\n              <p>\n                In a 30 day period you will need between {Math.ceil(packagesPerMonthLow)} and {Math.ceil(packagesPerMonthHigh)} packages of {inputFood}.\n      </p>\n            </>\n          }\n          <Form.Group>\n            <Form.Control as=\"select\"\n              onChange={handleOnChange}\n            >\n                  <option value=\"0\">Choose...</option>\n              {state.results.length > 0\n                ? state.results\n                .filter((food) => {\n                  //Remove petfood that do not match the current petType\n                  return food.petType.indexOf(currentPet.petType) >= 0;\n                })\n                .map((food, index) => {\n                  return <option key={index} value={food._id}>{food.name}</option>;\n                })\n                : \"No Foods Found\"}\n            </Form.Control>\n            <br />\n          </Form.Group>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  useHistory,\n} from \"react-router-dom\";\nimport API from \"./utils/API\";\nimport Navigation from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\nimport NewPet from \"./components/newPet/newPet\";\nimport SignUp from \"./pages/SignUp/SignUp\";\nimport Login from \"./pages/Login/Login\";\nimport Dashboard from \"./pages/Dashboard\";\nimport PetFoodForm from \"./pages/PetFoodForm/PetFoodForm\";\nimport FoodTable from \"./pages/FoodTable/FoodTable\";\nimport Footer from \"./components/Footer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport PetInfoForm from \"./components/petInfoForm/petInfoForm\";\nimport { FinalCalculation } from \"./components/finalCalculation/FinalCalculation\";\n\nconst App = (props) => {\n  const history = useHistory();\n  //For food form and pet form\n  const initalForm = {};\n\n  const [form, setForm] = useState(initalForm);\n\n  // get info on signed in user\n  const [userData, setUserData] = useState({\n    username: \"\",\n    id: \"\",\n  });\n\n  // state of selected pet from dashboard\n  const [currentPet, setCurrentPet] = useState({})\n\n\n  return (\n    <Router>\n      <div>\n        <Navigation setUserData={setUserData} />\n        <Wrapper>\n          <Route\n            exact\n            path=\"/login\"\n            render={(props) =>\n              userData.username !== \"\" ? (\n                <Redirect to=\"/\" />\n              ) : (\n                  <Login setUserData={setUserData} />\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/signup\"\n            render={(props) =>\n              userData.username !== \"\" ? (\n                <Redirect to=\"/\" />\n              ) : (\n                  <SignUp\n                    setUserData={setUserData}\n                  />\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/\"\n            render={(props) =>\n              userData.username === \"\" ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                  <Dashboard\n                    userData={userData}\n                    setCurrentPet={setCurrentPet}\n                  />\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/newPet\"\n            render={(props) =>\n              userData.username === \"\" ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                  <PetInfoForm\n                    form={form}\n                    setForm={setForm}\n                  />\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/petfood\"\n            render={(props) =>\n              userData.username === \"\" ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                  <PetFoodForm\n                    form={form}\n                    setForm={setForm}\n                  />\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/petfoods\"\n            render={(props) =>\n              userData.username === \"\" ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                  <FoodTable/>\n                )\n            }\n          />\n\n          <Route\n            exact\n            path=\"/finalcalculation\"\n            render={(props) =>\n              userData.username === \"\" ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                  <FinalCalculation\n                    currentPet={currentPet}\n                  />\n                )\n            }\n          />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}